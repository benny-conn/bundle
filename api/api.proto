syntax = "proto3";

option go_package = "api";

package api;


// USERS ------------------------------------------------------------------ ||

service UsersService {
    rpc Get (User) returns (User){}
    rpc Insert (User) returns (Empty) {}
    rpc Update (User) returns (Empty) {}
}

message User {
    string id = 1;
    string username = 2;
    string email = 3;
    string password = 4;
    repeated string scopes = 5;
    string tag = 6;
    string thumbnail = 7;
}

// PLUGINS --------------------------------------------------------------------- ||

service PluginsService {
    rpc Get (Plugin) returns (Plugin){}
    rpc Insert (Plugin) returns (Empty) {}
    rpc Update (Plugin) returns (Empty) {}
    rpc Paginate (PaginatePluginsRequest) returns (PaginatePluginsResponse) {}
}



message PaginatePluginsRequest {
    int32 page = 1;
    int32 count = 2;
    string search = 3;
    Category category = 4;
    Sort sort = 5;
}

message PaginatePluginsResponse {
    repeated Plugin plugins = 1;
}

message Plugin {
    string id = 1;
    string name = 2;
    User author = 3;
    string version = 4;
    string description = 5;
    string thumbnail = 6;
    Category category = 7;
    int32 downloads = 8;
    bool isPremium = 9;
    Premium premium = 10;
    int64 lastUpdated = 11;
}

message Premium {
    int32 price = 1;
    int32 purchases = 2;
}

enum Category {
    ALL = 0;
    PREMIUM = 1;
    TOOLS = 2;
    ECONOMY =3;
    CHAT = 4;
    MECHANICS = 5;
    ADMIN = 6;
    BUNGEE = 7;
    FUN = 8;
    MISC = 9;
    LIBRARIES = 10;
}

enum Sort {
    NONE = 0;
    DOWNLOADS = 1;
    PURCHASES = 2;
    LATEST = 3;
}


// READMEs --------------------------------------------------------------- ||


service ReadmeService {
    rpc Get (Plugin) returns (Readme){}
    rpc Insert (Readme) returns (Empty) {}
    rpc Update (Readme) returns (Empty) {}
}


message Readme {
    string id = 1;
    Plugin plugin = 2;
    string text = 3;
}

// SESSIONS ---------------------------------------------------------------- ||

service SessionService {
    rpc Get(Session) returns (Session) {}
    rpc Insert(Session) returns (SessionInsertResponse) {}
    rpc Delete(Session) returns (Empty) {}
}

message Session{
    string id = 1;
    string userId = 2;
    int64 lastRetrieved = 3;
}

message SessionInsertResponse {
    string id = 1;
}



// BUNDLES ------------------------------------------------------------- ||

service BundleService {
    rpc Get(Bundle) returns (Bundle) {}
    rpc Insert(Bundle) returns (Empty) {}
    rpc Update(Bundle) returns (Empty) {}
    rpc Delete(Bundle) returns (Empty) {}
}


message Bundle{
    string id = 1;
    string userId = 2;
    string ftpUser = 3;
    string ftpPass = 4;
    int32 ftpPort = 5;
    string ftpHost = 6;
    repeated string plugins = 7;
}

// UTIL ----------------------------------------------------------------- ||

message Empty {
}


