// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Insert(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UsersService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Insert(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.UsersService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.UsersService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	Get(context.Context, *User) (*User, error)
	Insert(context.Context, *User) (*Empty, error)
	Update(context.Context, *User) (*Empty, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) Get(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUsersServiceServer) Insert(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedUsersServiceServer) Update(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UsersService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UsersService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Insert(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UsersService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UsersService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _UsersService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UsersService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// PluginsServiceClient is the client API for PluginsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginsServiceClient interface {
	Get(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error)
	Insert(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Empty, error)
	Paginate(ctx context.Context, in *PaginatePluginsRequest, opts ...grpc.CallOption) (*PaginatePluginsResponse, error)
}

type pluginsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginsServiceClient(cc grpc.ClientConnInterface) PluginsServiceClient {
	return &pluginsServiceClient{cc}
}

func (c *pluginsServiceClient) Get(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, "/api.PluginsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsServiceClient) Insert(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PluginsService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsServiceClient) Update(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PluginsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsServiceClient) Paginate(ctx context.Context, in *PaginatePluginsRequest, opts ...grpc.CallOption) (*PaginatePluginsResponse, error) {
	out := new(PaginatePluginsResponse)
	err := c.cc.Invoke(ctx, "/api.PluginsService/Paginate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginsServiceServer is the server API for PluginsService service.
// All implementations must embed UnimplementedPluginsServiceServer
// for forward compatibility
type PluginsServiceServer interface {
	Get(context.Context, *Plugin) (*Plugin, error)
	Insert(context.Context, *Plugin) (*Empty, error)
	Update(context.Context, *Plugin) (*Empty, error)
	Paginate(context.Context, *PaginatePluginsRequest) (*PaginatePluginsResponse, error)
	mustEmbedUnimplementedPluginsServiceServer()
}

// UnimplementedPluginsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginsServiceServer struct {
}

func (UnimplementedPluginsServiceServer) Get(context.Context, *Plugin) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPluginsServiceServer) Insert(context.Context, *Plugin) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedPluginsServiceServer) Update(context.Context, *Plugin) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPluginsServiceServer) Paginate(context.Context, *PaginatePluginsRequest) (*PaginatePluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedPluginsServiceServer) mustEmbedUnimplementedPluginsServiceServer() {}

// UnsafePluginsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginsServiceServer will
// result in compilation errors.
type UnsafePluginsServiceServer interface {
	mustEmbedUnimplementedPluginsServiceServer()
}

func RegisterPluginsServiceServer(s grpc.ServiceRegistrar, srv PluginsServiceServer) {
	s.RegisterService(&PluginsService_ServiceDesc, srv)
}

func _PluginsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Get(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginsService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Insert(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Update(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsService_Paginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatePluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Paginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginsService/Paginate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Paginate(ctx, req.(*PaginatePluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginsService_ServiceDesc is the grpc.ServiceDesc for PluginsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PluginsService",
	HandlerType: (*PluginsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PluginsService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _PluginsService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PluginsService_Update_Handler,
		},
		{
			MethodName: "Paginate",
			Handler:    _PluginsService_Paginate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// ReadmeServiceClient is the client API for ReadmeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadmeServiceClient interface {
	Get(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Readme, error)
	Insert(ctx context.Context, in *Readme, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Readme, opts ...grpc.CallOption) (*Empty, error)
}

type readmeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadmeServiceClient(cc grpc.ClientConnInterface) ReadmeServiceClient {
	return &readmeServiceClient{cc}
}

func (c *readmeServiceClient) Get(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Readme, error) {
	out := new(Readme)
	err := c.cc.Invoke(ctx, "/api.ReadmeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readmeServiceClient) Insert(ctx context.Context, in *Readme, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.ReadmeService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readmeServiceClient) Update(ctx context.Context, in *Readme, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.ReadmeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadmeServiceServer is the server API for ReadmeService service.
// All implementations must embed UnimplementedReadmeServiceServer
// for forward compatibility
type ReadmeServiceServer interface {
	Get(context.Context, *Plugin) (*Readme, error)
	Insert(context.Context, *Readme) (*Empty, error)
	Update(context.Context, *Readme) (*Empty, error)
	mustEmbedUnimplementedReadmeServiceServer()
}

// UnimplementedReadmeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReadmeServiceServer struct {
}

func (UnimplementedReadmeServiceServer) Get(context.Context, *Plugin) (*Readme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReadmeServiceServer) Insert(context.Context, *Readme) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedReadmeServiceServer) Update(context.Context, *Readme) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReadmeServiceServer) mustEmbedUnimplementedReadmeServiceServer() {}

// UnsafeReadmeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadmeServiceServer will
// result in compilation errors.
type UnsafeReadmeServiceServer interface {
	mustEmbedUnimplementedReadmeServiceServer()
}

func RegisterReadmeServiceServer(s grpc.ServiceRegistrar, srv ReadmeServiceServer) {
	s.RegisterService(&ReadmeService_ServiceDesc, srv)
}

func _ReadmeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadmeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ReadmeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadmeServiceServer).Get(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadmeService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Readme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadmeServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ReadmeService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadmeServiceServer).Insert(ctx, req.(*Readme))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadmeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Readme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadmeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ReadmeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadmeServiceServer).Update(ctx, req.(*Readme))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadmeService_ServiceDesc is the grpc.ServiceDesc for ReadmeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadmeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ReadmeService",
	HandlerType: (*ReadmeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ReadmeService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _ReadmeService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReadmeService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
